Abstract class

An abstract class is just like any other class except the word abstract appears just in front of the reserved word class.  An abstract class is one for which no program can create an instance from it.  It is used to define a super-class that is intended to be sub-classed.  An abstract class may have abstract and non-abstract methods.  Abstract methods are similar to methods in an interface in that they have a signature but no implementation.  Any class that extends an abstract class (i.e. defines a sub-class of it) must override the abstract methods of its super-class.  Any class that has any abstract method must be an abstract class.  But an abstract class may have non-abstract (i.e. concrete) methods, allowing sub-classes to share common code.  If a sub-class wants access to a method from its super-class that it itself has overridden, it can be invoked by using the reserved word "super" just as one would use "this" to directly reference the current object.  Abstract classes are use to design a suitable class hierarchy to share code and keep sub-classes consistent and orderly.  A sub-class is made by adding the word "extends" and then the name of the super-class after the name of the class and before the body of that class is defined.  Only one class can be extended by another (i.e. no direct multiple-inheritance).  Which is to say, any sub-class has one super-class (although that super-class may also have a super-class).
